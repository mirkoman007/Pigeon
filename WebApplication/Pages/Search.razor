@page "/search"
@page "/search/{SearchString}"
@attribute [Authorize]
@inject IUserService UserService
@inject IGroupService GroupService
@inject NavigationManager NavigationManager





<div class="card mt-4">
    <h4 class="card-header">People</h4>
    <div class="card-body">
        @if (peoples == null)
        {
            <div class="spinner-border spinner-border-sm"></div>
        }
        else
        {
            <ul>
                @if (peoples.Count != 0)
                {
                    @foreach (var people in peoples)
                    {
                        <li><a href="/profile/@people.IdUser">@people.FirstLastName</a> - @people.Gender - @people.City</li>
                    }
                }
                else
                {
                    <li>"No result"</li>
                }
            </ul>
        }
    </div>
</div>

<div class="card mt-4">
    <h4 class="card-header">Groups</h4>
    <div class="card-body">
        @if (groups == null)
        {
            <div class="spinner-border spinner-border-sm"></div>
        }
        else
        {
            <ul>
                @if (groups.Count != 0)
                {
                    @foreach (var group in groups)
                    {
                        <li><a href="/group/@group.IdGroup">@group.Name</a> - @group.Decription</li>
                    }
                }
                else
                {
                    <li>"No result"</li>
                }
            </ul>
        }
    </div>
</div>

@code {
    [Parameter]
    public string SearchString { get; set; }

    IList<SearchUser> peoples;
    IList<SearchGroup> groups;

    protected override async Task OnInitializedAsync()
    {

        if (SearchString == null)
        {
            SearchString = "";
        }

        try
        {
            peoples = await UserService.Search(SearchString);
            groups = await GroupService.Search(SearchString);
        }
        catch
        {
            peoples = new List<SearchUser>();
            groups = new List<SearchGroup>();
        }
    }

    protected override async void OnParametersSet()
    {
        base.OnParametersSet();

        await OnInitializedAsync();
        StateHasChanged();
    }


}
