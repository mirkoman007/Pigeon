@page "/profile"
@page "/profile/{UserID:int}"
@attribute [Authorize]
@inject IAuthenticationService AuthenticationService
@inject IFriendService FriendService
@inject IPostService PostService
@inject IUserService UserService
@inject NavigationManager NavigationManager


@if (user != null) { 
<h3>@user.FirstName @user.LastName</h3>
}


<div class="row">



    <div class="col-md-4">
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title"><span class="oi oi-info" aria-hidden="true" /> Info</h5>
                <ul class="list-group list-group-flush">
                    @if (user != null)
                    {
                        <li class="list-group-item">Lives in: @user.City</li>
                        <li class="list-group-item">Born: @user.Birthday.ToShortDateString()</li>
                        <li class="list-group-item">Gender: @user.Gender</li>
                    }
                </ul>
            </div>
        </div>
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title"><span class="oi oi-people" aria-hidden="true" /> Friends</h5>
                <ul class="list-group list-group-flush">
                    @if (friends != null && friends.Count == 0)
                    {
                        <li class="list-group-item">You currently have no friends</li>
                    }
                    else if (friends != null)
                    {
                        int size = 6;
                        if (friends.Count < size)
                            size = friends.Count;
                        @for (int i = 0; i < size; i++)
                        {

                            <li class="list-group-item"><a href="/profile/@friends[i].UserId">@friends[i].FirstLastName</a></li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="col-md-8">
        @if (yourProfile)
        {
            <div class="card mb-3">
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <InputText @bind-Value="model.Text" class="form-control mb-3" placeholder="Your post here ....." />
                        <button disabled="@postBtnLoading" class="btn btn-success btn-sm">
                            @if (postBtnLoading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>}
                            POST
                        </button>
                        @if (!string.IsNullOrEmpty(error))
                        {
                            <div class="alert alert-danger mt-3 mb-0">@error</div>
                        }
                    </EditForm>
                </div>
            </div>
        }
        @if (postsLoading == true)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-grow text-success" role="status">
                    <span class="sr-only"></span>
                </div>
                <div class="spinner-grow text-success" role="status">
                    <span class="sr-only"></span>
                </div>
                <div class="spinner-grow text-success" role="status">
                    <span class="sr-only"></span>
                </div>
            </div>
        }
        else
        {
            @if (posts.Count == 0)
            {
                <div class="alert alert-danger" role="alert">
                    <p>No posts 😥</p>
                </div>
            }
            else
            {
                @foreach (var post in posts.OrderByDescending(p => p.DateTime))
                {

                    <div class="card mb-3">
                        <div class="card-body">
                            <p class="card-text"><a href="/profile/@post.UserId">@post.UserFirstLastName</a> (<a href="/post/@post.IdPost">@post.DateTime</a>)</p>
                            <p class="card-text">@post.Text</p>
                            <button type="button" class="btn btn-success btn-sm"><span class="oi oi-thumb-up" aria-hidden="true" /> Like</button>
                            <button type="button" class="btn btn-outline-success btn-sm"><span class="oi oi-chat" aria-hidden="true" /> Comment</button>
                            <button type="button" class="btn btn-outline-success btn-sm"><span class="oi oi-share" aria-hidden="true" /> Share</button>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int UserID { get; set; }

    private bool yourProfile;
    private bool postsLoading;
    private bool postBtnLoading;
    private IList<Post> posts;
    private IList<Friend> friends;
    private User user;
    private AddPost model = new AddPost();
    private string error;


    protected override async Task OnInitializedAsync()
    {
        yourProfile = false;
        if (UserID == 0 || UserID== AuthenticationService.User.IdUser)
        {
            yourProfile = true;
            UserID = AuthenticationService.User.IdUser;
        }

        await LoadPosts();
        await LoadFriends();
        await LoadProfileInfo();
    }

    private async void OnValidSubmit()
    {
        postBtnLoading = true;
        try
        {
            model.UserId = UserID;
            await PostService.AddPost(model);
            postBtnLoading = false;
            posts.Clear();
            await LoadPosts();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            error = ex.Message;
            postBtnLoading = false;
            StateHasChanged();
        }
    }


    async Task LoadPosts()
    {
        postsLoading = true;
        posts = await PostService.GetUserPost(UserID);
        postsLoading = false;
    }

    async Task LoadFriends()
    {
        friends = await FriendService.GetAllFriends(UserID);
    }

    async Task LoadProfileInfo()
    {
        user = await UserService.GetUser(UserID);
    }


    protected override async void OnParametersSet()
    {
        base.OnParametersSet();

        await OnInitializedAsync();
        StateHasChanged();
    }

}
