@page "/profile"
@page "/profile/{UserID:int}"
@attribute [Authorize]
@inject IAuthenticationService AuthenticationService
@inject IFriendService FriendService
@inject IPostService PostService
@inject IUserService UserService


@if (user != null)
{
    <h3>@user.FirstName @user.LastName</h3>
}

@if (!yourProfile && friendsLoaded)
{

    @if (IsYourFriend())
    {
        <button type="button" class="btn btn-outline-primary"><span class="oi oi-inbox" aria-hidden="true" /> Send message</button>
        <button type="button" class="btn btn-outline-danger" @onclick="Unfriend"><span class="oi oi-circle-x" aria-hidden="true" /> Unfriend</button>
    }
    else
    {
        @if (FriendRequestSent())
        {
            <button type="button" class="btn btn-outline-danger" @onclick="CancelFriendRequest"><span class="oi oi-person" aria-hidden="true" /> Cancel friend request</button>
        }
        else if(FriendRequestReceived())
        {
            <button type="button" class="btn btn-success" @onclick="AcceptFriendRequest"><span class="oi oi-person" aria-hidden="true" /> Accept friend request</button>
            <button type="button" class="btn btn-outline-danger" @onclick="DeclineFriendRequest"><span class="oi oi-person" aria-hidden="true" /> Decline friend request</button>
        }
        else
        {
            <button type="button" class="btn btn-primary" @onclick="SendFriendRequest"><span class="oi oi-person" aria-hidden="true" /> Send friend request</button>
        }

    }
}


<div class="row">

    <div class="col-md-4">
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title"><span class="oi oi-info" aria-hidden="true" /> Info</h5>
                <ul class="list-group list-group-flush">
                    @if (user != null)
                    {
                        <li class="list-group-item">Lives in: @user.City</li>
                        <li class="list-group-item">Born: @user.Birthday.ToShortDateString()</li>
                        <li class="list-group-item">Gender: @user.Gender</li>
                    }
                </ul>
            </div>
        </div>
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title"><span class="oi oi-people" aria-hidden="true" /> Friends</h5>
                <ul class="list-group list-group-flush">
                    @if (profileFriends != null && profileFriends.Count == 0)
                    {
                        <li class="list-group-item">You currently have no friends</li>
                    }
                    else if (profileFriends != null)
                    {
                        int size = 6;
                        if (profileFriends.Count < size)
                            size = profileFriends.Count;
                        @for (int i = 0; i < size; i++)
                        {

                            <li class="list-group-item"><a href="/profile/@profileFriends[i].UserId">@profileFriends[i].FirstLastName</a></li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="col-md-8">
        @if (yourProfile)
        {
            <div class="card mb-3">
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <InputText @bind-Value="model.Text" class="form-control mb-3" placeholder="Your post here ....." />
                        <button disabled="@postBtnLoading" class="btn btn-success btn-sm">
                            @if (postBtnLoading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>}
                            POST
                        </button>
                        @if (!string.IsNullOrEmpty(error))
                        {
                            <div class="alert alert-danger mt-3 mb-0">@error</div>
                        }
                    </EditForm>
                </div>
            </div>
        }
        @if (postsLoading == true || friendsLoaded == false)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-grow text-success" role="status">
                    <span class="sr-only"></span>
                </div>
                <div class="spinner-grow text-success" role="status">
                    <span class="sr-only"></span>
                </div>
                <div class="spinner-grow text-success" role="status">
                    <span class="sr-only"></span>
                </div>
            </div>
        }
        else
        {
            @if (!IsYourFriend() && !yourProfile)
            {
                <div class="alert alert-danger" role="alert">
                    <p>Profile is private</p>
                </div>
            }
            else if (posts.Count == 0)
            {
                <div class="alert alert-danger" role="alert">
                    <p>No posts 😥</p>
                </div>
            }
            else
            {
                @foreach (var post in posts.OrderByDescending(p => p.DateTime).Where(p=>p.GroupId==null))
                {
                    <PostComponent Post="post" ReturnLocation="ReturnLocation.Profile"></PostComponent>
                }
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int UserID { get; set; }

    private bool yourProfile;
    private bool postsLoading;
    private bool postBtnLoading;
    private bool friendsLoaded;
    private IList<Post> posts;
    private IList<Friend> profileFriends;
    private IList<Friend> yourFriends;
    private IList<FriendRequest> friendRequestSent;
    private IList<FriendRequest> friendRequestReceived;
    private User user;
    private AddPost model = new AddPost();
    private string error;


    protected override async Task OnInitializedAsync()
    {
        yourProfile = false;
        if (UserID == 0 || UserID == AuthenticationService.User.IdUser)
        {
            yourProfile = true;
            UserID = AuthenticationService.User.IdUser;
        }

        await LoadPosts();
        await LoadFriends();
        await LoadProfileInfo();
    }

    private async void OnValidSubmit()
    {
        postBtnLoading = true;
        try
        {
            model.UserId = UserID;
            await PostService.AddPost(model);
            postBtnLoading = false;
            posts.Clear();
            await LoadPosts();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            error = ex.Message;
            postBtnLoading = false;
            StateHasChanged();
        }
    }


    async Task LoadPosts()
    {
        postsLoading = true;
        posts = await PostService.GetUserPost(UserID);
        postsLoading = false;
    }

    async Task LoadFriends()
    {
        friendsLoaded = false;
        profileFriends = await FriendService.GetAllFriends(UserID);
        yourFriends = await FriendService.GetAllFriends(AuthenticationService.User.IdUser);
        friendRequestSent = await FriendService.GetFriendRequestSent(AuthenticationService.User.IdUser);
        friendRequestReceived = await FriendService.GetFriendRequestReceived(AuthenticationService.User.IdUser);
        friendsLoaded = true;
    }

    async Task LoadProfileInfo()
    {
        user = await UserService.GetUser(UserID);
    }


    protected override async void OnParametersSet()
    {
        base.OnParametersSet();

        await OnInitializedAsync();
        StateHasChanged();
    }

    private bool IsYourFriend()
    {
        //yourFriends.Where(f => f.UserId == UserID);

        foreach (var i in yourFriends)
        {
            if (i.UserId == UserID)
                return true;
        }

        return false;
    }

    private bool FriendRequestSent()
    {
        foreach(var i in friendRequestSent)
        {
            if (i.UserResponderId == UserID)
                return true;
        }

        return false;
    }

    private bool FriendRequestReceived()
    {
        foreach(var i in friendRequestReceived)
        {
            if (i.UserRequestId == UserID)
                return true;
        }

        return false;
    }

    private async void AcceptFriendRequest()
    {
        try
        {
            await FriendService.AcceptFriendRequest(UserID, AuthenticationService.User.IdUser);
            await LoadFriends();
            StateHasChanged();
        }
        catch
        {

            await LoadFriends();
            StateHasChanged();
        }
    }

    private async void DeclineFriendRequest()
    {
        try
        {
            await FriendService.DeclineFriendRequest(UserID,AuthenticationService.User.IdUser);
            await LoadFriends();
            StateHasChanged();
        }
        catch
        {

            await LoadFriends();
            StateHasChanged();
        }

    }

    private async void CancelFriendRequest()
    {
        try
        {
            await FriendService.DeclineFriendRequest(AuthenticationService.User.IdUser, UserID);
            await LoadFriends();
            StateHasChanged();
        }
        catch
        {

            await LoadFriends();
            StateHasChanged();
        }
    }

    private async void SendFriendRequest()
    {
        try
        {
            await FriendService.SendFriendRequest(AuthenticationService.User.IdUser, UserID);
            await LoadFriends();
            StateHasChanged();
        }
        catch
        {

        }
    }

    private async void Unfriend()
    {
        try
        {
            await FriendService.Unfriend(AuthenticationService.User.IdUser, UserID);
            await LoadFriends();
            StateHasChanged();
        }
        catch
        {

        }
    }

}
