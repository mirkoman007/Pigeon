@page "/group/{GroupID:int}"
@attribute [Authorize]
@inject IGroupService GroupService
@inject IPostService PostService
@inject IAuthenticationService AuthenticationService


@if (group != null)
{
    <h1>@group.Name</h1>
    <p>@group.Decription</p>
}


<div class="row">

    <div class="col-md-8">
        @if (members != null && AreYouMember())
        {


            <div class="card mb-3">
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <InputText @bind-Value="model.Text" class="form-control mb-3" placeholder="Your post here ....." />
                        <button disabled="@postBtnLoading" class="btn btn-success btn-sm">
                            @if (postBtnLoading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>}
                            POST
                        </button>
                        @if (!string.IsNullOrEmpty(error))
                        {
                            <div class="alert alert-danger mt-3 mb-0">@error</div>
                        }
                    </EditForm>
                </div>
            </div>
            @if (posts == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-grow text-success" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-success" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-success" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
            else
            {
                @if (posts.Count == 0)
                {
                    <div class="alert alert-danger" role="alert">
                        <p>No posts 😥</p>
                    </div>
                }
                else
                {
                    @foreach (var post in posts.OrderByDescending(p => p.DateTime))
                    {
                        <PostComponent Post="post" ReturnLocation="ReturnLocation.Home"></PostComponent>
                    }
                }
            }



        }
        else if(members != null)
        {
            <div class="alert alert-danger" role="alert">
                <p>You are not group member</p>
            </div>
        }

    </div>



    <div class="col-md-4">
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">Admins</h5>
                <ul class="list-group list-group-flush">
                    @if (admins != null)
                    {
                        @foreach (var a in admins)
                        {
                            @if (AreYouAdmin())
                            {
                                <li class="list-group-item">
                                    <a href="/profile/@a.IdUser">@a.FirstLastname</a>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => Demote(a.IdUser)"><span class="oi oi-arrow-thick-bottom" aria-hidden="true" /></button>
                                </li>
                            }
                            else
                            {
                                <li class="list-group-item"><a href="/profile/@a.IdUser">@a.FirstLastname</a></li>
                            }
                        }
                        @if (admins.Count == 0)
                        {
                            <li class="list-group-item">The group doesn't have admins.</li>
                            @if (AreYouMember())
                            {
                                <button type="button" class="btn btn-outline-primary btn-lg btn-block" @onclick="BecomeAdmin">Become an admin</button>
                            }
                        }
                    }
                </ul>
            </div>
        </div>
        @if (members != null && AreYouMember())
        {
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Users</h5>
                    <ul class="list-group list-group-flush">
                        @if (users != null)
                        {
                            @foreach (var u in users)
                            {
                                @if (AreYouAdmin())
                                {
                                    <li class="list-group-item">
                                        <a href="/profile/@u.IdUser">@u.FirstLastname</a>
                                        <button class="btn btn-outline-success btn-sm" @onclick="() => Promote(u.IdUser)"><span class="oi oi-arrow-thick-top" aria-hidden="true" /></button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => Remove(u.IdUser)"><span class="oi oi-circle-x" aria-hidden="true" /></button>
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item"><a href="/profile/@u.IdUser">@u.FirstLastname</a></li>
                                }
                            }
                            @if (users.Count == 0)
                            {
                                <li class="list-group-item">The group doesn't have users</li>
                            }
                        }
                    </ul>
                </div>
            </div>
        }
        else if (members != null)
        {
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">How to join group ?</h5>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">All groups on this platform are private. To join, you need to contact one of the administrators.</li>
                    </ul>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int GroupID { get; set; }

    private Group group;

    private IList<Post> posts;
    private IList<Member> members;
    private IList<Member> admins;
    private IList<Member> users;

    private AddGroupPost model = new AddGroupPost();
    private bool postBtnLoading;
    private string error;


    protected override async Task OnInitializedAsync()
    {
        await LoadGroupInfo();
        await LoadPosts();
        await LoadMembers();
        await LoadAdmins();
        await LoadUsers();
    }


    async Task LoadGroupInfo()
    {
        group = await GroupService.GetGroupById(GroupID);
    }

    async Task LoadPosts()
    {
        try
        {
            posts = await PostService.GetGroupPost(GroupID);
        }
        catch
        {
            posts = new List<Post>();
        }
    }

    async Task LoadMembers()
    {
        try
        {
            members = await GroupService.GetGroupMembers(GroupID);
        }
        catch
        {
            members = new List<Member>();
        }
    }

    async Task LoadAdmins()
    {
        try
        {
            admins = await GroupService.GetGroupAdmins(GroupID);
        }
        catch
        {
            admins = new List<Member>();
        }
    }

    async Task LoadUsers()
    {
        try
        {
            users = await GroupService.GetGroupUsers(GroupID);
        }
        catch
        {
            users = new List<Member>();
        }
    }


    private async void OnValidSubmit()
    {
        postBtnLoading = true;
        try
        {
            model.UserId = AuthenticationService.User.IdUser;
            model.GroupId = GroupID;
            await PostService.AddGroupPost(model);
            postBtnLoading = false;
            posts.Clear();
            await LoadPosts();
            StateHasChanged();

        }
        catch (Exception ex)
        {
            error = ex.Message;
            postBtnLoading = false;
            StateHasChanged();
        }
    }

    private bool AreYouMember()
    {
        foreach (var m in members)
        {
            if (m.IdUser == AuthenticationService.User.IdUser)
                return true;
        }

        return false;
    }

    private bool AreYouAdmin()
    {
        foreach (var a in admins)
        {
            if (a.IdUser == AuthenticationService.User.IdUser)
                return true;
        }

        return false;
    }

    private void BecomeAdmin()
    {
        Promote(AuthenticationService.User.IdUser);
    }

    private async void Promote(int userId)
    {
        try
        {
            await GroupService.UpdateGroupMember(new AddMember { GroupId = GroupID, UserId = userId, UserType = "admin" });
        }
        catch (Exception)
        {

        }

        admins.Clear();
        users.Clear();
        await LoadAdmins();
        await LoadUsers();
        StateHasChanged();
    }

    private async void Demote(int userId)
    {
        try
        {
            await GroupService.UpdateGroupMember(new AddMember { GroupId = GroupID, UserId = userId, UserType = "user" });
        }
        catch (Exception)
        {

        }

        admins.Clear();
        users.Clear();
        await LoadAdmins();
        await LoadUsers();
        StateHasChanged();
    }

    private async void Remove(int userId)
    {
        try
        {
            await GroupService.RemoveGroupMember(userId,GroupID);
        }
        catch (Exception)
        {

        }

        members.Clear();
        admins.Clear();
        users.Clear();
        await LoadMembers();
        await LoadAdmins();
        await LoadUsers();
        StateHasChanged();
    }

}
